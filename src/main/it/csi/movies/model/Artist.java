package it.csi.movies.model;
// Generated 14-gen-2009 11.36.57 by Hibernate Tools 3.2.2.GA

import it.csi.movies.model.enums.Country;
import it.csi.movies.model.enums.Sex;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Lob;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

/**
 * Artist generated by hbm2java
 */
@Entity
@Table(name = "artist", catalog = "movies")
public class Artist implements java.io.Serializable {

	private Integer id;
	private String name;
	private String surname;
	private Date birthDate;
	private Country country;
	private Sex sex;
	private byte[] picture;
	private String picContentType;
	private Set<Movie> moviesAsDirector = new HashSet<Movie>(0);
	private Set<Movie> moviesAsActor = new HashSet<Movie>(0);

	public Artist() {
	}

	public Artist(String name, String surname, Date birthDate,
			Country country, Sex sex, byte[] picture, String picContentType, Set<Movie> moviesAsDirector, Set<Movie> moviesAsActor) {
		this.name = name;
		this.surname = surname;
		this.birthDate = birthDate;
		this.country = country;
		this.sex = sex;
		this.picture = picture;
		this.picContentType = picContentType;
		this.moviesAsDirector = moviesAsDirector;
		this.moviesAsActor = moviesAsActor;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "surname")
	public String getSurname() {
		return this.surname;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "birth_date")
	public Date getBirthDate() {
		return this.birthDate;
	}

	public void setBirthDate(Date birthYear) {
		this.birthDate = birthYear;
	}

	@Enumerated(EnumType.STRING)
	@Column(name = "country")
	public Country getCountry() {
		return this.country;
	}

	public void setCountry(Country country) {
		this.country = country;
	}

	@Enumerated(EnumType.STRING)
	@Column(name = "sex")
	public Sex getSex() {
		return this.sex;
	}

	public void setSex(Sex sex) {
		this.sex = sex;
	}
	
	@Lob @Basic(fetch=FetchType.LAZY)
	@Column(name = "picture", length=16777215)
	public byte[] getPicture() {
		return this.picture;
	}
	
	public void setPicture(byte[] picture) {
		this.picture = picture;
	}
	
	@Column(name = "pic_content_type")
	public String getPicContentType() { return picContentType; }
	public void setPicContentType(String picContentType) {
	this.picContentType = picContentType;
	}
	
	@ManyToMany(mappedBy="directors", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH}, fetch = FetchType.LAZY)
	public Set<Movie> getMoviesAsDirector() {
		return this.moviesAsDirector;
	}

	public void setMoviesAsDirector(Set<Movie> moviesAsDirector) {
		this.moviesAsDirector = moviesAsDirector;
	}
	@ManyToMany(mappedBy="actors", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH}, fetch = FetchType.LAZY)
	public Set<Movie> getMoviesAsActor() {
		return this.moviesAsActor;
	}

	public void setMoviesAsActor(Set<Movie> moviesAsActor) {
		this.moviesAsActor = moviesAsActor;
	}

}
